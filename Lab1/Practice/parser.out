Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> calc
Rule 1     calc -> expression
Rule 2     calc -> var_assign
Rule 3     calc -> empty
Rule 4     var_assign -> NAME EQUALS expression
Rule 5     expression -> LPAREN expression RPAREN
Rule 6     expression -> expression MULTIPLY expression
Rule 7     expression -> expression DIVIDE expression
Rule 8     expression -> expression MODULUS expression
Rule 9     expression -> expression POWER expression
Rule 10    expression -> expression PLUS expression
Rule 11    expression -> expression MINUS expression
Rule 12    expression -> expression DOUBLE_EQUALS expression
Rule 13    expression -> MINUS expression
Rule 14    expression -> INT
Rule 15    expression -> FLOAT
Rule 16    expression -> NAME
Rule 17    empty -> <empty>

Terminals, with rules where they appear

DIVIDE               : 7
DOUBLE_EQUALS        : 12
EQUALS               : 4
FLOAT                : 15
INT                  : 14
LPAREN               : 5
MINUS                : 11 13
MODULUS              : 8
MULTIPLY             : 6
NAME                 : 4 16
PLUS                 : 10
POWER                : 9
RPAREN               : 5
error                : 

Nonterminals, with rules where they appear

calc                 : 0
empty                : 3
expression           : 1 4 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13
var_assign           : 2

Parsing method: LALR

state 0

    (0) S' -> . calc
    (1) calc -> . expression
    (2) calc -> . var_assign
    (3) calc -> . empty
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression MODULUS expression
    (9) expression -> . expression POWER expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression DOUBLE_EQUALS expression
    (13) expression -> . MINUS expression
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . NAME
    (4) var_assign -> . NAME EQUALS expression
    (17) empty -> .

    LPAREN          shift and go to state 5
    MINUS           shift and go to state 6
    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 9
    $end            reduce using rule 17 (empty -> .)

    calc                           shift and go to state 1
    expression                     shift and go to state 2
    var_assign                     shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> calc .



state 2

    (1) calc -> expression .
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . MODULUS expression
    (9) expression -> expression . POWER expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . DOUBLE_EQUALS expression

    $end            reduce using rule 1 (calc -> expression .)
    MULTIPLY        shift and go to state 10
    DIVIDE          shift and go to state 11
    MODULUS         shift and go to state 12
    POWER           shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    DOUBLE_EQUALS   shift and go to state 16


state 3

    (2) calc -> var_assign .

    $end            reduce using rule 2 (calc -> var_assign .)


state 4

    (3) calc -> empty .

    $end            reduce using rule 3 (calc -> empty .)


state 5

    (5) expression -> LPAREN . expression RPAREN
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression MODULUS expression
    (9) expression -> . expression POWER expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression DOUBLE_EQUALS expression
    (13) expression -> . MINUS expression
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . NAME

    LPAREN          shift and go to state 5
    MINUS           shift and go to state 6
    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 18

    expression                     shift and go to state 17

state 6

    (13) expression -> MINUS . expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression MODULUS expression
    (9) expression -> . expression POWER expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression DOUBLE_EQUALS expression
    (13) expression -> . MINUS expression
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . NAME

    LPAREN          shift and go to state 5
    MINUS           shift and go to state 6
    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 18

    expression                     shift and go to state 19

state 7

    (14) expression -> INT .

    MULTIPLY        reduce using rule 14 (expression -> INT .)
    DIVIDE          reduce using rule 14 (expression -> INT .)
    MODULUS         reduce using rule 14 (expression -> INT .)
    POWER           reduce using rule 14 (expression -> INT .)
    PLUS            reduce using rule 14 (expression -> INT .)
    MINUS           reduce using rule 14 (expression -> INT .)
    DOUBLE_EQUALS   reduce using rule 14 (expression -> INT .)
    $end            reduce using rule 14 (expression -> INT .)
    RPAREN          reduce using rule 14 (expression -> INT .)


state 8

    (15) expression -> FLOAT .

    MULTIPLY        reduce using rule 15 (expression -> FLOAT .)
    DIVIDE          reduce using rule 15 (expression -> FLOAT .)
    MODULUS         reduce using rule 15 (expression -> FLOAT .)
    POWER           reduce using rule 15 (expression -> FLOAT .)
    PLUS            reduce using rule 15 (expression -> FLOAT .)
    MINUS           reduce using rule 15 (expression -> FLOAT .)
    DOUBLE_EQUALS   reduce using rule 15 (expression -> FLOAT .)
    $end            reduce using rule 15 (expression -> FLOAT .)
    RPAREN          reduce using rule 15 (expression -> FLOAT .)


state 9

    (16) expression -> NAME .
    (4) var_assign -> NAME . EQUALS expression

    MULTIPLY        reduce using rule 16 (expression -> NAME .)
    DIVIDE          reduce using rule 16 (expression -> NAME .)
    MODULUS         reduce using rule 16 (expression -> NAME .)
    POWER           reduce using rule 16 (expression -> NAME .)
    PLUS            reduce using rule 16 (expression -> NAME .)
    MINUS           reduce using rule 16 (expression -> NAME .)
    DOUBLE_EQUALS   reduce using rule 16 (expression -> NAME .)
    $end            reduce using rule 16 (expression -> NAME .)
    EQUALS          shift and go to state 20


state 10

    (6) expression -> expression MULTIPLY . expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression MODULUS expression
    (9) expression -> . expression POWER expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression DOUBLE_EQUALS expression
    (13) expression -> . MINUS expression
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . NAME

    LPAREN          shift and go to state 5
    MINUS           shift and go to state 6
    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 18

    expression                     shift and go to state 21

state 11

    (7) expression -> expression DIVIDE . expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression MODULUS expression
    (9) expression -> . expression POWER expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression DOUBLE_EQUALS expression
    (13) expression -> . MINUS expression
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . NAME

    LPAREN          shift and go to state 5
    MINUS           shift and go to state 6
    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 18

    expression                     shift and go to state 22

state 12

    (8) expression -> expression MODULUS . expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression MODULUS expression
    (9) expression -> . expression POWER expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression DOUBLE_EQUALS expression
    (13) expression -> . MINUS expression
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . NAME

    LPAREN          shift and go to state 5
    MINUS           shift and go to state 6
    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 18

    expression                     shift and go to state 23

state 13

    (9) expression -> expression POWER . expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression MODULUS expression
    (9) expression -> . expression POWER expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression DOUBLE_EQUALS expression
    (13) expression -> . MINUS expression
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . NAME

    LPAREN          shift and go to state 5
    MINUS           shift and go to state 6
    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 18

    expression                     shift and go to state 24

state 14

    (10) expression -> expression PLUS . expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression MODULUS expression
    (9) expression -> . expression POWER expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression DOUBLE_EQUALS expression
    (13) expression -> . MINUS expression
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . NAME

    LPAREN          shift and go to state 5
    MINUS           shift and go to state 6
    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 18

    expression                     shift and go to state 25

state 15

    (11) expression -> expression MINUS . expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression MODULUS expression
    (9) expression -> . expression POWER expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression DOUBLE_EQUALS expression
    (13) expression -> . MINUS expression
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . NAME

    LPAREN          shift and go to state 5
    MINUS           shift and go to state 6
    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 18

    expression                     shift and go to state 26

state 16

    (12) expression -> expression DOUBLE_EQUALS . expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression MODULUS expression
    (9) expression -> . expression POWER expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression DOUBLE_EQUALS expression
    (13) expression -> . MINUS expression
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . NAME

    LPAREN          shift and go to state 5
    MINUS           shift and go to state 6
    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 18

    expression                     shift and go to state 27

state 17

    (5) expression -> LPAREN expression . RPAREN
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . MODULUS expression
    (9) expression -> expression . POWER expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . DOUBLE_EQUALS expression

    RPAREN          shift and go to state 28
    MULTIPLY        shift and go to state 10
    DIVIDE          shift and go to state 11
    MODULUS         shift and go to state 12
    POWER           shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    DOUBLE_EQUALS   shift and go to state 16


state 18

    (16) expression -> NAME .

    RPAREN          reduce using rule 16 (expression -> NAME .)
    MULTIPLY        reduce using rule 16 (expression -> NAME .)
    DIVIDE          reduce using rule 16 (expression -> NAME .)
    MODULUS         reduce using rule 16 (expression -> NAME .)
    POWER           reduce using rule 16 (expression -> NAME .)
    PLUS            reduce using rule 16 (expression -> NAME .)
    MINUS           reduce using rule 16 (expression -> NAME .)
    DOUBLE_EQUALS   reduce using rule 16 (expression -> NAME .)
    $end            reduce using rule 16 (expression -> NAME .)


state 19

    (13) expression -> MINUS expression .
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . MODULUS expression
    (9) expression -> expression . POWER expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . DOUBLE_EQUALS expression

    PLUS            reduce using rule 13 (expression -> MINUS expression .)
    MINUS           reduce using rule 13 (expression -> MINUS expression .)
    $end            reduce using rule 13 (expression -> MINUS expression .)
    RPAREN          reduce using rule 13 (expression -> MINUS expression .)
    MULTIPLY        shift and go to state 10
    DIVIDE          shift and go to state 11
    MODULUS         shift and go to state 12
    POWER           shift and go to state 13
    DOUBLE_EQUALS   shift and go to state 16

  ! MULTIPLY        [ reduce using rule 13 (expression -> MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 13 (expression -> MINUS expression .) ]
  ! MODULUS         [ reduce using rule 13 (expression -> MINUS expression .) ]
  ! POWER           [ reduce using rule 13 (expression -> MINUS expression .) ]
  ! DOUBLE_EQUALS   [ reduce using rule 13 (expression -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 20

    (4) var_assign -> NAME EQUALS . expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression MODULUS expression
    (9) expression -> . expression POWER expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression DOUBLE_EQUALS expression
    (13) expression -> . MINUS expression
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . NAME

    LPAREN          shift and go to state 5
    MINUS           shift and go to state 6
    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 18

    expression                     shift and go to state 29

state 21

    (6) expression -> expression MULTIPLY expression .
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . MODULUS expression
    (9) expression -> expression . POWER expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . DOUBLE_EQUALS expression

    MULTIPLY        reduce using rule 6 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 6 (expression -> expression MULTIPLY expression .)
    MODULUS         reduce using rule 6 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 6 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 6 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 6 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 6 (expression -> expression MULTIPLY expression .)
    POWER           shift and go to state 13
    DOUBLE_EQUALS   shift and go to state 16

  ! POWER           [ reduce using rule 6 (expression -> expression MULTIPLY expression .) ]
  ! DOUBLE_EQUALS   [ reduce using rule 6 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ shift and go to state 10 ]
  ! DIVIDE          [ shift and go to state 11 ]
  ! MODULUS         [ shift and go to state 12 ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 22

    (7) expression -> expression DIVIDE expression .
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . MODULUS expression
    (9) expression -> expression . POWER expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . DOUBLE_EQUALS expression

    MULTIPLY        reduce using rule 7 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 7 (expression -> expression DIVIDE expression .)
    MODULUS         reduce using rule 7 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 7 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 7 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 7 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 7 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 13
    DOUBLE_EQUALS   shift and go to state 16

  ! POWER           [ reduce using rule 7 (expression -> expression DIVIDE expression .) ]
  ! DOUBLE_EQUALS   [ reduce using rule 7 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ shift and go to state 10 ]
  ! DIVIDE          [ shift and go to state 11 ]
  ! MODULUS         [ shift and go to state 12 ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 23

    (8) expression -> expression MODULUS expression .
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . MODULUS expression
    (9) expression -> expression . POWER expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . DOUBLE_EQUALS expression

    MULTIPLY        reduce using rule 8 (expression -> expression MODULUS expression .)
    DIVIDE          reduce using rule 8 (expression -> expression MODULUS expression .)
    MODULUS         reduce using rule 8 (expression -> expression MODULUS expression .)
    PLUS            reduce using rule 8 (expression -> expression MODULUS expression .)
    MINUS           reduce using rule 8 (expression -> expression MODULUS expression .)
    $end            reduce using rule 8 (expression -> expression MODULUS expression .)
    RPAREN          reduce using rule 8 (expression -> expression MODULUS expression .)
    POWER           shift and go to state 13
    DOUBLE_EQUALS   shift and go to state 16

  ! POWER           [ reduce using rule 8 (expression -> expression MODULUS expression .) ]
  ! DOUBLE_EQUALS   [ reduce using rule 8 (expression -> expression MODULUS expression .) ]
  ! MULTIPLY        [ shift and go to state 10 ]
  ! DIVIDE          [ shift and go to state 11 ]
  ! MODULUS         [ shift and go to state 12 ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 24

    (9) expression -> expression POWER expression .
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . MODULUS expression
    (9) expression -> expression . POWER expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . DOUBLE_EQUALS expression

    MULTIPLY        reduce using rule 9 (expression -> expression POWER expression .)
    DIVIDE          reduce using rule 9 (expression -> expression POWER expression .)
    MODULUS         reduce using rule 9 (expression -> expression POWER expression .)
    POWER           reduce using rule 9 (expression -> expression POWER expression .)
    PLUS            reduce using rule 9 (expression -> expression POWER expression .)
    MINUS           reduce using rule 9 (expression -> expression POWER expression .)
    $end            reduce using rule 9 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 9 (expression -> expression POWER expression .)
    DOUBLE_EQUALS   shift and go to state 16

  ! DOUBLE_EQUALS   [ reduce using rule 9 (expression -> expression POWER expression .) ]
  ! MULTIPLY        [ shift and go to state 10 ]
  ! DIVIDE          [ shift and go to state 11 ]
  ! MODULUS         [ shift and go to state 12 ]
  ! POWER           [ shift and go to state 13 ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 25

    (10) expression -> expression PLUS expression .
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . MODULUS expression
    (9) expression -> expression . POWER expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . DOUBLE_EQUALS expression

    PLUS            reduce using rule 10 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 10 (expression -> expression PLUS expression .)
    $end            reduce using rule 10 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 10 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 10
    DIVIDE          shift and go to state 11
    MODULUS         shift and go to state 12
    POWER           shift and go to state 13
    DOUBLE_EQUALS   shift and go to state 16

  ! MULTIPLY        [ reduce using rule 10 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 10 (expression -> expression PLUS expression .) ]
  ! MODULUS         [ reduce using rule 10 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 10 (expression -> expression PLUS expression .) ]
  ! DOUBLE_EQUALS   [ reduce using rule 10 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 26

    (11) expression -> expression MINUS expression .
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . MODULUS expression
    (9) expression -> expression . POWER expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . DOUBLE_EQUALS expression

    PLUS            reduce using rule 11 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 11 (expression -> expression MINUS expression .)
    $end            reduce using rule 11 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 11 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 10
    DIVIDE          shift and go to state 11
    MODULUS         shift and go to state 12
    POWER           shift and go to state 13
    DOUBLE_EQUALS   shift and go to state 16

  ! MULTIPLY        [ reduce using rule 11 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 11 (expression -> expression MINUS expression .) ]
  ! MODULUS         [ reduce using rule 11 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 11 (expression -> expression MINUS expression .) ]
  ! DOUBLE_EQUALS   [ reduce using rule 11 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 27

    (12) expression -> expression DOUBLE_EQUALS expression .
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . MODULUS expression
    (9) expression -> expression . POWER expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . DOUBLE_EQUALS expression

    MULTIPLY        reduce using rule 12 (expression -> expression DOUBLE_EQUALS expression .)
    DIVIDE          reduce using rule 12 (expression -> expression DOUBLE_EQUALS expression .)
    MODULUS         reduce using rule 12 (expression -> expression DOUBLE_EQUALS expression .)
    POWER           reduce using rule 12 (expression -> expression DOUBLE_EQUALS expression .)
    PLUS            reduce using rule 12 (expression -> expression DOUBLE_EQUALS expression .)
    MINUS           reduce using rule 12 (expression -> expression DOUBLE_EQUALS expression .)
    DOUBLE_EQUALS   reduce using rule 12 (expression -> expression DOUBLE_EQUALS expression .)
    $end            reduce using rule 12 (expression -> expression DOUBLE_EQUALS expression .)
    RPAREN          reduce using rule 12 (expression -> expression DOUBLE_EQUALS expression .)

  ! MULTIPLY        [ shift and go to state 10 ]
  ! DIVIDE          [ shift and go to state 11 ]
  ! MODULUS         [ shift and go to state 12 ]
  ! POWER           [ shift and go to state 13 ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]
  ! DOUBLE_EQUALS   [ shift and go to state 16 ]


state 28

    (5) expression -> LPAREN expression RPAREN .

    MULTIPLY        reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    MODULUS         reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    DOUBLE_EQUALS   reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 5 (expression -> LPAREN expression RPAREN .)


state 29

    (4) var_assign -> NAME EQUALS expression .
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . MODULUS expression
    (9) expression -> expression . POWER expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . DOUBLE_EQUALS expression

    $end            reduce using rule 4 (var_assign -> NAME EQUALS expression .)
    MULTIPLY        shift and go to state 10
    DIVIDE          shift and go to state 11
    MODULUS         shift and go to state 12
    POWER           shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    DOUBLE_EQUALS   shift and go to state 16

